#!/bin/bash
#
# Restore the layout + programs from the previous saved i3 session

set -e
readonly IFS=$'\n\t'
readonly CURR_DIR="$(dirname "${0}")"

# Import common variables and functions
source "${CURR_DIR}/utils/common.sh"

# Handle errors
source "${CURR_DIR}/utils/error_handling.sh"

check_version_flag "$@"

# Start logger
source "${CURR_DIR}/utils/logs.sh"

source "${CURR_DIR}/utils/automatic_saving.sh"

#####################################
# Get all the window IDs on a workspace
# Arguments:
#   Workspace name
# Returns:
#   The IDs of the windows on the workspace
#####################################
get_window_ids_on_workspace() {
    local workspace_name="${1}"

    # First, get the workspace tree from the i3 tree. Then, get the
    # window IDs that are not null and return those.
    local window_ids="$(
        i3-msg -t get_tree |
        jq --arg ws "${workspace_name}" \
            'recurse(.nodes[]) |
             select(.name==$ws) |
             recurse(.nodes[]).window |
             select(. != null)'
    )"
    echo "${window_ids}"
}

#####################################
# Restore all programs within a workspace.
# Globals:
#   i3_PATH
# Arguments:
#   Workspace name
# Returns:
#   0 if either no program file is found or programs
#   were restored correctly. Non-zero on error.
#####################################
restore_programs() {
    local workspace_name="${1}"

    # Sanitize the workspace name so it matches the file name
    local sanitized_ws_name="${workspace_name// /\{space\}}"
    sanitized_ws_name="${sanitized_ws_name//\//\{slash\}}"
    local file="${i3_PATH}/workspace_${sanitized_ws_name}_programs.sh"

    if [[ ! -f ${file} ]]; then
        log "No programs file found for Workspace ${workspace_name}"
        return 0
    fi

    log "Restoring programs for Workspace ${workspace_name}"

    # Focus on the workspace. It should already be foucsed
    # from appending the layout, but this is here as a safety
    i3-msg "workspace --no-auto-back-and-forth ${workspace_name}" >/dev/null

    # Make the file executable
    chmod +x "${file}"

    # The number of containers are needed for the script to select
    # which command it wants to execute for every container
    local num_containers
    num_containers="$(wc --lines <"${file}")"
    log "Number of containers: ${num_containers}"

    # Execute one container at a time to ensure each one is reliably
    # restored in the correct order
    for ((i = 0; i < "${num_containers}"; i++)); do
        # Execute the command in the script pertaining to 'i'
        i3-msg exec "${file}" "${i}" >/dev/null
        sleep 0.2
    done

    # Return the newly created window IDs so they can be unmapped
    window_ids="$(get_window_ids_on_workspace ${workspace_name})"
    echo "${window_ids}"
}

#####################################
# Unmap all windows with the corresponding
# IDs
# Arguments:
#   Window IDs
#####################################
unmap_windows() {
    window_ids="${1}"
    for id in ${window_ids[@]}; do
        xdotool windowunmap "${id}"
    done
}

#####################################
# Map all windows with the corresponding
# IDs
# Arguments:
#   Window IDs
#####################################
map_windows() {
    window_ids="${1}"
    for id in ${window_ids[@]}; do
        xdotool windowmap "${id}"
    done
}

#####################################
# Restore the web browsers if they were
# saved from the last session
# Arguments:
#   Layout file, a path
#   Workspace name
#####################################
restore_layout() {
    local file="${1}"
    local workspace_name="${2}"

    log "Restoring layout for Workspace ${workspace_name}"

    # Append the layout of the saved workspace
    i3-msg "workspace --no-auto-back-and-forth ${workspace_name}; \
        append_layout ${file}"
}

#####################################
# Restore the layout and programs within a workspace.
# Globals:
#   i3_PATH
# Arguments:
#   Layout file, a path.
#####################################
restore_workspace() {
    local file="${1}"

    # Get workspace name from file name
    local workspace_name="${file#*_}"
    workspace_name="${workspace_name%_*}"

    # Unsanitize the workspace name
    workspace_name="${workspace_name//\{slash\}/\/}"

    window_ids="$(restore_programs "${workspace_name}")"

    log "Unmapping windows for Workspace ${workspace_name}"
    unmap_windows "${window_ids}"

    restore_layout "${file}" "${workspace_name}"

    log "Mapping windows for Workspace ${workspace_name}"
    map_windows "${window_ids}"
}

#####################################
# Kills all containers that are empty (i.e. don't have
# a program running in them. This usually happens because
# the window did not get swallowed.
# Arguments:
#   None
#####################################
kill_empty_containers() {
    local containers
    containers="$(i3-msg --type get_tree | jq '.nodes[]')"

    # Recursively get all containers that still have swallow criteria (meaning
    # they never got populated) and kill them
    while [[ -n ${containers} ]]; do
        local empty_containers
        empty_containers="$(echo "${containers}" |
            jq 'select(( .swallows == [] | not ) and ( .type == "con" )) .window')"

        if [[ -n ${empty_containers} ]]; then
            local num_containers
            num_containers="$(echo "${empty_containers}" | wc --words)"

            # Kill all containers by ID
            log "Killing ${num_containers} empty containers"
            echo "${empty_containers}" | xargs -I % i3-msg [id=%] kill
        fi

        containers="$(echo "${containers}" | jq '.nodes[]')"
    done
}

#####################################
# Restore the web browsers if they were
# saved from the last session
# Globals:
#   i3_PATH
# Arguments:
#   None
#####################################
restore_browsers() {
    local file="${i3_PATH}/web_browsers.sh"
    if [[ ! -f ${file} ]]; then
        return 0
    fi

    log "Restoring web browsers"

    # Make the file executable
    chmod +x "${file}"

    i3-msg exec "${file}"
}

#####################################
# Restore the layouts and programs of all workspaces.
# Also, kill empty containers and restart i3 to fix
# graphical errors.
# Globals:
#   i3_PATH
# Arguments:
#   None
#####################################
restore_workspaces() {
    local files file
    files="$(ls "${i3_PATH}"/*_layout.json)"

    for file in ${files}; do
        restore_workspace "${file}"
    done

    restore_browsers

    # Wait for the programs to load and the layout windows to get swallowed
    sleep 2

    # Clean up any leftover containers that didn't get swallowed
    kill_empty_containers

    # Reload i3 to fix any graphical errors (specifically with firefox)
    log "Restarting session to fix graphical errors"
    i3-msg restart
}

#####################################
# If the restore script is invoked with
# --interval, initialize automatic saving.
# Arguments:
#   First two arguments to the script
#####################################
start_automatic_saving() {
    if [[ ${1} == "--interval" ]]; then
        start_save_interval "${2}"
    fi
}

log "Restoring current i3wm session"
restore_workspaces
log "Finished restoring current i3wm session\n"

start_automatic_saving "${1}" "${2}"
